<%
  association_name = field.association[:name]
  collection = field.associated_collection.sort_by{|object| object.first}

  # for edit action
  selected = field.bindings[:object].send(association_name).map{|object|
    [field.associated_model_config.list.with(:object => object).object_label, object.id]
  }.sort_by{|object| object.first}

  # if error accurs - show the selected associations
  if params["associations"]
    select = params["associations"][association_name.to_param.pluralize].to_a.map{|o| o.to_i}
    selected = collection.map{|t|
      t if select.include?(t[1])
    }.compact

  end

  # exclude selected from the original collection
  collection_new = collection.map{|t|
    t if not selected.include?(t)
  }.compact

%>
              <%= label_tag "#{field.abstract_model.to_param}_#{association_name}", field.label %>
              <% unless association_name == :grades %>
              <div class="many_header">
                <input type="text" id="<%= "#{field.abstract_model.to_param}_#{association_name}" %>" class="searchMany" value="Search <%= association_name %>" ref="<%= association_name %>" used="0" />
                <p>
                  <strong><%= t("admin.new.chosen", :name => association_name) %></strong>
                  <%= t("admin.new.select_choice")%><%= image_tag "rails_admin/selector-add.gif", :alt => "Add" %>
                </p>
              </div>
              <div class="manySelector">
                <select multiple="multiple" size="8" class="firstSelect">
                  <%= options_for_select(collection_new) %>
                </select>
                <a href="javascript:void(0)" class="addAssoc"><%= image_tag "rails_admin/selector-add.gif", :alt => "Add element", :class => "add_elem" %></a>
                <a href="javascript:void(0)" class="removeAssoc"><%= image_tag "rails_admin/selector-remove.gif", :alt => "Remove element", :class => "remove_elem" %></a>
                <select id="associations_<%= association_name %>" multiple="multiple" class="secondSelect" size="8">
                  <%= options_for_select(selected) %>
                </select>
              </div>
              <div class="many_controls">
                <a href="javascript:void(0)" class="addAllAssoc"><%= image_tag "rails_admin/selector-addall.gif", :alt => "Add all", :class => "add_all" %><%= t("admin.new.chose_all")%></a>
                <a href="javascript:void(0)" class="clearAssoc"><%= image_tag "rails_admin/selector-removeall.gif", :alt => "Clear all", :class => "clear_all" %><%= t("admin.new.clear_all")%></a>
              </div>
              <div class="manyHidden">
                <% if selected.empty? %>
                <input type="hidden" name="associations[<%= association_name %>][]" />
                <% else %>
                <% selected.each do |t|%>
                <input type="hidden" name="associations[<%= association_name %>][]" value="<%= t[1] %>" />
                <% end %>
                <% end %>
              </div>
              <% else %>

                <div style="margin-left: 103px;">
                  <% collection.each do |elem| %>
                      <%= render :partial => 'grades', :locals => {:grade => elem, :selected => selected} %>
                      <input type="hidden" value="" name="associations[grades][]" />
                  <% end %>
                  <input type="hidden" id="students_grades" name="students[grades]" value="0" />
                </div>
                </div>
                </div>
                <div id="assessments">
                  <%= render Assessment.where(:student_id => params[:id]).all %>
                </div>
                
                 <div class="formSection">
                 <div class="field">
              <% end %>
              <span class="breakSpan"></span>

<script>
  document.on("click", "input[data-remote]", function(event, element) {
    if(!element.checked == true) return; 
    new Ajax.Request(element.readAttribute('data-url'), {
      method: "GET",
      parameters: {},
      evalScripts: true,

      onComplete:    function(request) { element.fire("ajax:complete", request); },
      onSuccess:     function(request) { element.fire("ajax:success",  request); },
      onFailure:     function(request) { element.fire("ajax:failure",  request); }
    });
  });
</script>
